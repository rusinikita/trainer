name = "Slices"
category = "wtf"
default_code_snippet = """
func main() {
	var x []int
	x = append(x, 0)
	x = append(x, 1)
	x = append(x, 2)

	y3 := append(x, 3)
    y4 := append(x, 4)

    fmt.Println(append(y3, y4...))
}
"""
learning_advise = """
Learn about how slices work in Go, especially how the append function can affect slice capacity and length.
"""

[[learning_links]]
title = "Go Slices: Usage and Internals"
url = "https://go.dev/blog/slices-intro"

[[learning_links]]
title = "Go by Example: Slices"
url = "https://gobyexample.com/slices"

[[learning_links]]
title = "Learn Go With Tests: Arrays and Slices"
url = "https://quii.gitbook.io/learn-go-with-tests/go-fundamentals/arrays-and-slices"

[[questions]]
text = "Select program output"
type = "select_answers"
answers = [
    { text = "[0 1 2 4 0 1 2 4]", code_line_ranges = [] },
    { text = "panic: slice bounds out of range" },
    { text = "[0 1 2 3 0 1 2 4]" },
]

[[questions]]
text = "What is a slice in Go?"
type = "select_answers"
answers = [
    { text = "A dynamically-sized, flexible view into the elements of an array", code_line_ranges = [] },
    { text = "A static portion of an array that cannot change in size" },
    { text = "A key-value pair collection similar to a map" },
    { text = "A method to iterate over collections" },
]

[[questions]]
text = "Choose the slice capacity and len of variable x after each append"
type = "select_answers"
answers = [
    { text = "len - 1, cap - 1", code_line_ranges = [[2]]  },
    { text = "len - 1, cap - 2"},
    { text = "len - 2, cap - 2", code_line_ranges = [[3]] },
    { text = "len - 3, cap - 4", code_line_ranges = [[4]] },
    { text = "len - 3, cap - 8" },
]

[[questions]]
text = "What causes unexpected output?"
type = "select_answers"
answers = [
    { text = "Slices are immutable in Go, leading to unexpected results when modified" },
    { text = "The fmt.Println function incorrectly interprets slice pointers" },
    { text = "Index 3 was overwritten", code_line_ranges = [[7]] },
    { text = "Compiler optimizations alter the sequence of append operations" },
]

[[questions]]
text = "What modifications will produce the expected output [0 1 2 3 0 1 2 4]?"
type = "select_answers"
answers = [
    { text = "Use y3 instead of x" },
    { text = "Replace with 'x := make([]int, 0, 3)'", code_line_ranges = [[1]] },
    { text = "Replace 'x' with 'copy(x)'" },
    { text = "Replace 'x' with 'slices.Clone(x)'", code_line_ranges = [[6, 7]] },
    { text = "Use fmt.Printf" },
    { text = "Insert 'copy(x, x)' above", code_line_ranges = [[7]] },
]

