name = "Structs"
category = "easy"
default_code_snippet = """
type Employee struct {
    AccessLevel string
}

func upgradeAccess(employee *Employee) {
    employee = &Employee{
        AccessLevel: "Admin",
    }
}

func main() {
    employee := &Employee{
        AccessLevel: "User",
    }
    fmt.Println(employee.AccessLevel)
    upgradeAccess(employee)
    fmt.Println(employee.AccessLevel)
}
"""
learning_advise = """
Go functions gets a copy of argument values. We use pointers to avoid value copying. But pointer is value too.

Play with pointers. Read about value receiver vs pointer receiver.
"""

[[learning_links]]
title = "Tour of Go"
url = "https://go.dev/tour/methods/4"

[[learning_links]]
title = "Go by Example: poiners"
url = "https://gobyexample.com/pointers"

[[learning_links]]
title = "Go by Example: methods"
url = "https://gobyexample.com/methods"

[[learning_links]]
title = "Learn Go With Tests"
url = "https://quii.gitbook.io/learn-go-with-tests/go-fundamentals/pointers-and-errors"

[[questions]]
text = "Select program output"
type = "select_answers"
answers = [
    { text = "User\nAdmin" },
    { text = "Admin\nUser" },
    { text = "User\nUser", code_line_ranges = [] },
    { text = "Admin\nAdmin" }
]

[[questions]]
text = "What data type is pointer?"
type = "select_answers"
answers = [
    { text = "System type" },
    { text = "String memory address hash" },
    { text = "Number memory address hex", code_line_ranges = [] },
    { text = "Struct with memory address field" },
]

[[questions]]
text = "Point at problems in code"
type = "select_answers"
answers = [
    { text = "Pointer func argument is unmodifiable" },
    { text = "New structure istead of field change", code_line_ranges = [[4, 7]] },
    { text = "Employee is immutable struct" },
    { text = "Not a pointer" },
    { text = "Pointer copy changed", code_line_ranges = [[4, 7]] },
]

[[questions]]
text = "Select possible fixes"
type = "select_answers"
answers = [
    { text = "Impossible to fix" },
    { text = "*employee = Employee{", code_line_ranges = [[5]] },
    { text = "employee := Employee{" },
    { text = "employee.AccessLevel = \"Admin\"", code_line_ranges = [[5]] },
]
