name = "Parallel queries"
category = "concurrency"
default_code_snippet = """
func callSomething(caller string) string {
	seconds := 1

	time.Sleep(time.Duration(seconds) * time.Second)

	return fmt.Sprintf("%s: %d", caller, seconds)
}

func main() {
	start := time.Now()
	var callResults []any

	var wg sync.WaitGroup
	wg.Add(2)
	go func() {
	    firstResult := callSomething("first")
		callResults = append(callResults, firstResult)
	}()

	go func() {
		secondResult := callSomething("second")
		callResults = append(callResults, secondResult)
	}()

	wg.Wait()

	fmt.Println("finished", int(time.Since(start)/time.Millisecond))
	fmt.Println(callResults...)
}
"""
learning_advise = "Read sync.WaitGroup, sync.Mutex docs"

[[learning_links]]
title = "Docs"
url = "https://pkg.go.dev/sync#WaitGroup"

[[learning_links]]
title = "Go by Example: WaitGroup"
url = "https://gobyexample.com/waitgroups"

[[learning_links]]
title = "Go by Example: Mutex"
url = "https://gobyexample.com/mutexes"

[[learning_links]]
title = "Learn Go With Tests"
url = "https://quii.gitbook.io/learn-go-with-tests/go-fundamentals/sync"

[[questions]]
text = "Select program output"
type = "select_answers"
answers = [
    { text = "finished 1001\nfirst: 1 second: 1" },
    { text = "finished 1001\nsecond: 1" },
    { text = "finished 1001" },
    { text = "all goroutines are asleep - deadlock!", code_line_ranges = [] },
]

[[questions]]
text = "Point at problems in code"
type = "select_answers"
answers = [
    { text = "Incorrect sintax" },
    { text = "Race condition", code_line_ranges = [[10], [15], [19]] },
    { text = "WaitGroup unnotified", code_line_ranges = [[15], [19]] },
    { text = "Must be .Slep, not .Wait" },
]

[[questions]]
text = "How to fix these problems?"
type = "select_answers"
answers = [
    { text = "Rewrite all" },
    { text = "wg.Done", code_line_ranges = [] },
    { text = "Mutex/RWMutex", code_line_ranges = [] },
    { text = "Call fmt.Println inside goroutine" },
]
